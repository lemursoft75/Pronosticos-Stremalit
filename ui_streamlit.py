import streamlit as st
import pandas as pd
from predictor import predecir_y_comparar_modelos

def main():
    st.set_page_config(page_title="Reyma del Sureste", layout="wide")
    st.title("üìà Predicci√≥n Inteligente de Ventas - Reyma del Sureste")

    with st.expander("üìù Instrucciones de uso"):
        st.markdown("""
        Bienvenido a la aplicaci√≥n de **Predicci√≥n Inteligente de Ventas** de Reyma del Sureste.

        ### üß≠ Recomendaci√≥n general:
        Antes de generar un pron√≥stico individual, te recomendamos hacer una **Comparativa de Modelos** presionando el bot√≥n ü§ñ en el men√∫ lateral. Esto te permitir√° identificar qu√© modelo es m√°s confiable para cada art√≠culo con base en el error de predicci√≥n (**MAE**).

        ### üõ†Ô∏è Pasos para utilizar esta app:
        1. **Cargar archivo hist√≥rico**: Sube un archivo Excel con el historial de ventas.
        2. *El archivo debe tener las columnas: art√≠culo, a√±o, y los 12 meses del a√±o.*
        3. *(Opcional)* **Cargar ventas reales** para validar el rendimiento de los modelos.
        4. Presiona el bot√≥n **ü§ñ Comparar Modelos** para ver cu√°l se ajusta mejor a tus datos.
        5. Luego, selecciona tu modelo favorito en el men√∫ desplegable y presiona **‚öôÔ∏è Calcular Pron√≥stico**.
        6. Revisa las predicciones y m√©tricas por art√≠culo.

        ¬°As√≠ puedes tomar decisiones m√°s inteligentes y con respaldo estad√≠stico! üìä‚ú®
        """)

    ventas_reales_2024 = None
    df_historico = None
    resultados_globales = {}
    errores_globales = {}
    metricas_globales = {}

    st.sidebar.header("Opciones")

    modelo_elegido = st.sidebar.selectbox(
        "üß† Selecciona el modelo de predicci√≥n:",
        ["Random Forest", "Linear Regression", "XGBoost", "Prophet"]
    )

    archivo_historico = st.sidebar.file_uploader("üìÇ Cargar archivo hist√≥rico de ventas", type=["xlsx", "xls"])
    if archivo_historico:
        df_historico = pd.read_excel(archivo_historico)

        columnas_mensuales = ["enero", "febrero", "marzo", "abril", "mayo", "junio",
                              "julio", "agosto", "septiembre", "octubre", "noviembre", "diciembre"]
        columnas_mensuales = [col for col in columnas_mensuales if col in df_historico.columns]

        # Calcular total anual
        df_historico["Total Anual"] = df_historico[columnas_mensuales].sum(axis=1)

        st.subheader("üìÇ Datos hist√≥ricos cargados con Total Anual")

        # Aplicar formato solo a columnas num√©ricas
        columnas_numericas = df_historico.select_dtypes(include=["int", "float"]).columns
        formato_columnas = {col: "{:.0f}" for col in columnas_numericas}

        st.dataframe(df_historico.style.format(formato_columnas))

    archivo_reales = st.sidebar.file_uploader("üìÑ (Opcional) Cargar ventas reales", type=["xlsx", "xls"])
    if archivo_reales:
        ventas_reales_2024 = pd.read_excel(archivo_reales)
        st.success("‚úÖ Ventas reales cargadas correctamente.")

        columnas_mensuales_reales = ["enero", "febrero", "marzo", "abril", "mayo", "junio",
                                     "julio", "agosto", "septiembre", "octubre", "noviembre", "diciembre"]
        columnas_mensuales_reales = [col for col in columnas_mensuales_reales if col in ventas_reales_2024.columns]

        ventas_reales_2024["Total Anual"] = ventas_reales_2024[columnas_mensuales_reales].sum(axis=1)

        st.subheader("üìÑ Ventas reales cargadas con Total Anual")

        columnas_numericas_reales = ventas_reales_2024.select_dtypes(include=["int", "float"]).columns
        formato_reales = {col: "{:.0f}" for col in columnas_numericas_reales}

        st.dataframe(ventas_reales_2024.style.format(formato_reales))

    if st.sidebar.button("ü§ñ Comparar Modelos"):
        if df_historico is None:
            st.warning("‚ö†Ô∏è Primero debes cargar los datos hist√≥ricos.")
        else:
            resultados_lr, resultados_rf, resultados_xgb, resultados_prophet, metricas = predecir_y_comparar_modelos(df_historico, ventas_reales_2024)
            st.subheader("üîç Comparativa entre Modelos")

            for articulo in metricas:
                m = metricas[articulo]
                st.markdown(f"**Art√≠culo: {articulo}**")
                st.markdown(f"- MAE Linear Regression: `{m['mae_lr']}`")
                st.markdown(f"- MAE Random Forest: `{m['mae_rf']}`")
                st.markdown(f"- MAE XGBoost: `{m['mae_xgb']}`")
                st.markdown(f"- MAE Prophet: `{m['mae_prophet']}`")
                st.markdown(f"- ‚úÖ Modelo Recomendado: `{m['modelo_recomendado']}`")

    if st.sidebar.button("‚öôÔ∏è Calcular Pron√≥stico"):
        if df_historico is None:
            st.warning("‚ö†Ô∏è Primero debes cargar los datos hist√≥ricos.")
        else:
            resultados_lr, resultados_rf, resultados_xgb, resultados_prophet, metricas = predecir_y_comparar_modelos(df_historico, ventas_reales_2024)

            if modelo_elegido == "Random Forest":
                resultados = resultados_rf
            elif modelo_elegido == "Linear Regression":
                resultados = resultados_lr
            elif modelo_elegido == "XGBoost":
                resultados = resultados_xgb
            elif modelo_elegido == "Prophet":
                resultados = resultados_prophet
            else:
                st.error("‚ùå Modelo de predicci√≥n no v√°lido.")
                resultados = {}

            resultados_globales.update(resultados)

            for articulo in resultados.keys():
                if articulo in metricas:
                    errores_globales[articulo] = (
                        metricas[articulo]['mae_rf'] if modelo_elegido == "Random Forest"
                        else metricas[articulo]['mae_lr'] if modelo_elegido == "Linear Regression"
                        else metricas[articulo]['mae_xgb'] if modelo_elegido == "XGBoost"
                        else metricas[articulo]['mae_prophet']
                    )

            metricas_globales.update({
                a: {
                    **metricas.get(a, {}),
                    "modelo_recomendado": modelo_elegido
                } for a in resultados
            })

            st.success(f"‚úÖ Pron√≥stico generado usando: {modelo_elegido}")

            for articulo, pred in resultados.items():
                st.write(f"### Art√≠culo: {articulo}")
                pred_df = pd.DataFrame(pred, index=[0])
                pred_df["Total Anual"] = pred_df.sum(axis=1)
                st.write("#### Predicci√≥n por Mes (columnas):")
                st.dataframe(pred_df.style.format("{:.0f}"))

                if articulo in errores_globales:
                    st.write(f"MAE: {errores_globales[articulo]}")

if __name__ == "__main__":
    main()